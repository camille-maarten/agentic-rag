containers:
  - resources: {}
    terminationMessagePath: /dev/termination-log
    name: gpt-java-chatbot
    env:
      - name: JAVA_APP_JAR
        value: /deployments/quarkus-run.jar
    ports:
      - name: http
        containerPort: 8080
        protocol: TCP
    imagePullPolicy: Always
    volumeMounts:
      - name: elasticsearch-sample-es-http-certs-public
        readOnly: true
        mountPath: /deployments/config
    terminationMessagePolicy: File
    envFrom:
      - secretRef:
          name: app-credentials
    image: >-
      image-registry.openshift-image-registry.svc:5000/elastic-vector/gpt-java-chatbot@sha256:c1f38bf30dac975982d0e2e085e467acc8f7527236c9ea308af1fb870f3aac26
serviceAccount: gpt-java-chatbot
volumes:
  - name: elasticsearch-sample-es-http-certs-public
    secret:
      secretName: elasticsearch-sample-es-http-certs-public
      defaultMode: 420
dnsPolicy: ClusterFirst





with volumes
spec:
  containers:
      - env:
        - name: JAVA_APP_JAR
          value: /deployments/quarkus-run.jar
        envFrom:
          - secretRef:
              name: app-credentials
        image: gpt-java-chatbot:1.0.0-SNAPSHOT
        imagePullPolicy: Always
        name: gpt-java-chatbot
        ports:
          - containerPort: 8080
            name: http
            protocol: TCP
        volumeMounts:
          - mountPath: /deployments/config
            name: es-cert-volume
            readOnly: true
  serviceAccountName: gpt-java-chatbot
  volumes:
    - name: es-cert-volume
      secret:
        defaultMode: 384
        optional: false
        secretName: elasticsearch-sample-es-http-certs-public


# Production profile, in this case on OpenShift
#%prod.quarkus.openshift.route.expose=true
#%prod.quarkus.openshift.route.tls.termination=edge
#%prod.quarkus.kubernetes-client.trust-certs=true

#Elastic setup
#%prod.quarkus.elasticsearch.hosts=elasticsearch-sample-es-internal-http.elastic-vector.svc.cluster.local:9200
#%prod.quarkus.elasticsearch.username=elastic
#%prod.quarkus.elasticsearch.password=${ELASTIC_PASSWORD}
#%prod.quarkus.elasticsearch.ssl=true
#%prod.quarkus.elasticsearch.truststore=/deployments/config/elasticsearch-truststore.jks
#%prod.quarkus.elasticsearch.truststore-password=changeit
#%prod.quarkus.elasticsearch.protocol=https

# S3 storage backend by minio. current sandbox setup.
#%prod.minio.endpoint=http://minio.elastic-vector.svc.cluster.local:9000
#%prod..minio.access-key=${MINIO_ACCESS_KEY}
#%prod.minio.secret-key=${MINIO_SECRET_KEY}
#%prod.minio.bucket-name=elastic-bucket

# langchain4j config
#%prod.quarkus.langchain4j.openai.api-key=${OPENAI_API_KEY}

#%prod.quarkus.langchain4j.openai.base-url=https://granite-elastic-vector.apps.cluster-bhjzt.bhjzt.sandbox2412.opentlc.com/v1
#%prod.quarkus.langchain4j.openai.chat-model.model-name=granite

#%prod.quarkus.langchain4j.timeout=60s
#%prod.quarkus.http.port=8080
#%prod.quarkus.websockets-next.server.auto-ping-interval=1m