# local podman hosted llm.
#%dev.quarkus.langchain4j.openai.base-url=http://localhost:52819/v1

# if using local podman comment the following line
%dev.quarkus.langchain4j.openai.api-key=${OPENAI_API_KEY}

# give it some more time, based on local resources..
%dev.quarkus.langchain4j.openai.timeout=180s

# Enable logging of both requests and responses
%dev.quarkus.langchain4j.openai.log-requests=true
%dev.quarkus.langchain4j.openai.log-responses=true


# Elastic search local dev
# the docker-compose file has ml enabled.
%dev.quarkus.elasticsearch.hosts=localhost:9200
%dev.quarkus.elasticsearch.username=elastic
%dev.quarkus.elasticsearch.password=changeme
quarkus.elasticsearch.devservices.enabled=false


# S3 storage backend by minio. current sandbox setup.
%dev.minio.endpoint=https://localhost:9000
%dev.minio.access-key=minioadmin
%dev.minio.secret-key=minioadmin
%dev.minio.bucket-name=jakarata12-bucket


# Production profile, in this case on OpenShift
%prod.quarkus.openshift.route.expose=true
%prod.quarkus.kubernetes-client.trust-certs=true

#Elastic setup
%prod.quarkus.elasticsearch.hosts=elasticsearch-sample-es-internal-http.elastic-vectordb.svc.cluster.local:9200
%prod.quarkus.elasticsearch.username=elastic
%prod.quarkus.elasticsearch.password=${ELASTIC_PASSWORD}
#%prod.quarkus.elasticsearch.ssl=true
#%prod.quarkus.elasticsearch.truststore=/deployments/config/elasticsearch-truststore.jks
#%prod.quarkus.elasticsearch.truststore-password=changeit
%prod.quarkus.elasticsearch.protocol=https

# S3 storage backend by minio. current sandbox setup.
%prod.minio.endpoint=http://minio.elastic-vectordb.svc.cluster.local:9000
%prod..minio.access-key=${MINIO_ACCESS_KEY}
%prod.minio.secret-key=${MINIO_SECRET_KEY}
%prod.minio.bucket-name=jakarata12-bucket

# langchain4j config
%prod.quarkus.langchain4j.openai.api-key=${OPENAI_API_KEY}
%prod.quarkus.langchain4j.timeout=60s
%prod.quarkus.http.port=8080

# secret credentials
%prod.quarkus.kubernetes-config.secrets=app-credentials
%prod.quarkus.kubernetes-config.secrets.enabled=true

# kubectl create secret generic db-credentials \
#        --from-literal=MINIO_ACCESS_KEY=superkey \
#        --from-literal=MINIO_SECRET_KEY=superSecret \
#        --from-literal=OPENAI_API_KEY=superSecret
#        --from-literal=ELASTIC_PASSWORD=superSecret